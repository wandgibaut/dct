Até o presente momento, o DCT foi implementado para a linguagem de programação Python, e no futuro, serão desenvolvidos implementações do DCT para outras linguagens de programação, como Java, C, C ++, C #, PHP, Ruby, Perl, JavaScript, etc.
Dentre as funcionalidades já implementadas no DCT, estão:

\begin{itemize}
    \item \textbf{get\_memory\_object\_by\_name}: Retorna uma lista de Memórias a partir do seu nome. A lista contém todos as Memórias que possuem o nome passado como parâmetro. 
    \item \textbf{get\_memory\_object\_by\_group}: Retorna uma lista de Memórias a partir do seu grupo. A lista contém todos as Memórias que possuem o grupo passado como parâmetro.
    \item \textbf{get\_memory\_object}: Método que, dano nome, ip/port e tipo de comunicação, retorna uma Memória. Esse método não exige a leitura do arquivo \textit{fields.json}, portanto é mais rápido que os métodos anteriores. No entanto, exige-se maior atenção em sua utilização para evitar erros.
    \item \textbf{set\_memory\_object\_by_name}: Método que, dado um nome, um campo e um valor, altera o valor do campo passado como parâmetro em uma dada Memória.
    \item \textbf{set\_memory\_object\_by\_group}: Método que, dado um grupo, um campo e um valor, altera o valor do campo passado como parâmetro em todas as Memórias que pertencem ao grupo passado como parâmetro.
    \item \textbf{set\_memory\_object}: Método que, dado um nome, um ip/port, um tipo de comunicação, um campo e um valor, altera o valor do campo passado como parâmetro em uma dada Memória. Esse método não exige a leitura do arquivo \textit{fields.json}, portanto é mais rápido que os métodos anteriores. No entanto, exige-se maior atenção em sua utilização para evitar erros.
    \item \textbf{add\_memory\_to\_group}: Método que, dado um nome e grupo, adiciona uma dada Memória ao grupo passado como parâmetro.
    \item \textbf{get\_node\_info}: Retorna as informações de um Nó, dado um ip e uma porta.
    \item \textbf{getz_codelet\_info}: Retorna as informações de um Codelet, dado um nome, um ip e uma porta.
\end{itemize}


O servidor implementado em Python, utiliza a biblioteca Flask. Ele é responsável por receber as requisições do cliente e retornar as informações solicitadas. Até o presente momento, as seguintes requisições podem ser realizadas:

\begin{itemize}
    \item \textbf{'<ip/port>/get_memory/<memory_name>'}: Retorna uma lista de Memórias serializadas em formato \textit{json} a partir do seu nome. A lista contém todos as Memórias que possuem o nome passado como parâmetro. Caso não haja Memórias com este nome, o servidor retornará uma mensagem com código 404.
    \item \textbf{''<ip/port>/set_memory/', methods=['POST']}: A partir de parâmetros passados no corpo da requisição, altera o valor de um campo de uma dada Memória. Caso não haja Memórias com este nome, o servidor retornará uma mensagem com código 404.
    \item \textbf{''<ip/port>/get_codelet_info/<codelet_name>'}: Retorna as informações de um Codelet, dado um nome. Caso não haja Codelets com este nome, o servidor retornará uma mensagem com código 404.
    \item \textbf{''<ip/port>/get_node_info'}: Retorna as informações do Nó, como número de Codelets, quais Mémorias são lidas e escritas por elementos internos deste Nó.
    \item \textbf{''<ip/port>/kill_codelet/<codelet_name>'}: Para a execução de um Codelet, dado um nome.
    \item \textbf{''<ip/port>/run_codelet/<codelet_name>'}: Inicia a execução de um Codelet, dado um nome.
    \item \textbf{''<ip/port>/configure_death/'}: Reinicia a contagem de "votos" do Nó para a sua morte. Também atualiza o valor de limiar.
    \item \textbf{''<ip/port>/vote_kill/', methods=['POST']}: Vota na morte de um Nó, dado um ip e uma porta. Recebe uma confirmação de voto.
    \item \textbf{''<ip/port>/die/', methods=['POST']}: Adiciona um voto para a morte do Nó. Caso o número de votos seja maior que o limiar, o \textit{Node Master} para sua execução.
    \item \textbf{''<ip/port>/die_now/'}: Para a execução do Nó.
\end{itemize}